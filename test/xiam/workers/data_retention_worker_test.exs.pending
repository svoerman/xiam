defmodule XIAM.Workers.DataRetentionWorkerTest do
  use XIAM.DataCase
  
  @moduletag :pending

  import Ecto.Query
  
  alias XIAM.Workers.DataRetentionWorker
  alias XIAM.Users.User
  alias XIAM.Audit
  alias XIAM.Audit.AuditLog
  alias XIAM.Consent.ConsentRecord
  
  setup do
    # For testing, we'll add the fields to the User struct at runtime 
    # Create test user with basic fields
    {:ok, user} = %User{
      email: "testuser@example.com"
    } |> Repo.insert()
    
    # Add virtual fields for testing
    user = %{user | 
      last_sign_in_at: DateTime.add(DateTime.utc_now(), -800 * 24 * 60 * 60, :second),
      anonymized: false, 
      admin: false
    }
    
    # Create an admin user
    {:ok, admin} = %User{
      email: "admin@example.com"
    } |> Repo.insert()
    
    # Add virtual fields for testing
    admin = %{admin | 
      last_sign_in_at: DateTime.add(DateTime.utc_now(), -800 * 24 * 60 * 60, :second),
      anonymized: false, 
      admin: true
    }
    
    # Create a user that requested deletion
    {:ok, delete_user} = %User{
      email: "delete@example.com"
    } |> Repo.insert()
    
    # Add virtual field for testing
    delete_user = %{delete_user | deletion_requested: true}
    
    # Create test audit logs
    old_date = DateTime.add(DateTime.utc_now(), -500 * 24 * 60 * 60, :second)
    
    {:ok, _audit_log} = %AuditLog{
      action: "test_action",
      actor_type: :user,
      actor_id: user.id,
      entity_type: "user",
      entity_id: user.id,
      metadata: %{},
      inserted_at: old_date
    } |> Repo.insert()
    
    # Create test consent record
    old_revoke_date = DateTime.add(DateTime.utc_now(), -365 * 24 * 60 * 60, :second)
    
    {:ok, consent} = %ConsentRecord{
      user_id: user.id,
      consent_type: "marketing",
      consent_given: false,
      revoked_at: old_revoke_date
    } |> Repo.insert()
    
    %{user: user, admin: admin, delete_user: delete_user, consent: consent}
  end
  
  describe "DataRetentionWorker" do
    test "perform/1 runs data retention tasks", %{} do
      # We'll just assert it doesn't crash
      assert DataRetentionWorker.perform(%Oban.Job{}) == :ok
    end
    
    test "schedule/0 creates an Oban job" do
      assert {:ok, %Oban.Job{}} = DataRetentionWorker.schedule()
    end
    
    test "run_data_retention_tasks/0 processes all retention tasks" do
      # Pre-test assertions
      assert Repo.aggregate(User, :count, :id) == 3
      assert Repo.aggregate(AuditLog, :count, :id) == 1
      assert Repo.aggregate(ConsentRecord, :count, :id) == 1
      
      # Override application config for testing
      Application.put_env(:xiam, :audit_logs_retention_days, 30)
      Application.put_env(:xiam, :inactive_account_days, 365)
      Application.put_env(:xiam, :consent_retention_days, 30)
      
      # Run the worker
      DataRetentionWorker.run_data_retention_tasks()
      
      # Verify expected outcomes
      
      # Audit logs should be deleted
      assert Repo.aggregate(AuditLog, :count, :id) == 0
      
      # Regular user should be anonymized
      anonymized_user = Repo.get(User, 1)
      assert anonymized_user.anonymized == true
      assert anonymized_user.email =~ "anonymized"
      
      # Admin should not be anonymized
      admin_user = Repo.get(User, 2)
      assert admin_user.anonymized == false
      assert admin_user.email == "admin@example.com"
      
      # User that requested deletion should be deleted
      assert Repo.get(User, 3) == nil
      
      # Consent record should be deleted
      assert Repo.aggregate(ConsentRecord, :count, :id) == 0
      
      # Reset application config
      Application.delete_env(:xiam, :audit_logs_retention_days)
      Application.delete_env(:xiam, :inactive_account_days)
      Application.delete_env(:xiam, :consent_retention_days)
    end
    
    test "anonymize_user/1 properly anonymizes a user", %{user: user} do
      # This is private but we can test through reflection
      anonymize_user = :erlang.make_fun(DataRetentionWorker, :anonymize_user, 1)
      
      # Call the function
      {:ok, anonymized_user} = anonymize_user.(user)
      
      # Verify user is anonymized
      assert anonymized_user.anonymized == true
      assert anonymized_user.email =~ "anonymized"
      assert anonymized_user.name == "Anonymized User"
      
      # Verify an audit log was created
      audit_log = Repo.one(from a in AuditLog, 
        where: a.action == "user_anonymized" and 
               a.entity_id == ^user.id,
        limit: 1)
      
      assert audit_log != nil
    end
    
    test "anonymize_user/1 prevents anonymizing admin users", %{admin: admin} do
      anonymize_user = :erlang.make_fun(DataRetentionWorker, :anonymize_user, 1)
      
      # Attempt to anonymize admin
      result = anonymize_user.(admin)
      
      # Verify operation was rejected
      assert result == {:error, :cannot_anonymize_admin}
      
      # Verify admin remains unchanged
      admin_check = Repo.get(User, admin.id)
      assert admin_check.anonymized == false
      assert admin_check.email == "admin@example.com"
    end
  end
end