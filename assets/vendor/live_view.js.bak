// Enhanced LiveSocket class implementation with proper event handling
export class LiveSocket {
  constructor(url, socket, opts = {}) {
    this.url = url;
    this.socket = socket;
    this.opts = opts;
    this.connected = false;
    this.params = opts.params || {};
    this.viewLogger = opts.viewLogger;
    this.activeElement = null;
    this.prevActive = null;
    this.silenced = false;
    this.main = null;
    this.bindingPrefix = opts.bindingPrefix || "phx-";
    this.hooks = opts.hooks || {};
    this.debug = opts.debug || false;
    
    // Initialize the real Phoenix Socket connection to be used later
    this.phoenixSocket = new socket(url, { params: this.params });
    
    console.log("Enhanced LiveView wrapper initialized");
  }

  // Connect to the LiveView Socket and set up event listeners
  connect() {
    this.connected = true;
    console.log("LiveView socket connected");
    
    // Connect the Phoenix socket
    this.phoenixSocket.connect();
    
    // Set up event listeners for handling click events and modal interactions
    this._setupEventListeners();
    
    // Initialize hooks
    this._initializeHooks();
    
    return this;
  }
  
  // Set up event listeners for handling click events and form submissions
  _setupEventListeners() {
    console.log("Setting up LiveView event listeners");
    
    // We'll let Phoenix LiveView handle form submissions natively
    if (this.debug) {
      document.addEventListener('submit', (event) => {
        const form = event.target;
        console.log('Form submission detected:', {
          form,
          action: form.action,
          method: form.method,
          hasPhxSubmit: form.hasAttribute('phx-submit'),
          phxSubmitValue: form.getAttribute('phx-submit')
        });
        // We DO NOT call _handleFormSubmit or preventDefault - let Phoenix handle it
      }, false);
    }
    
    // Handle click events for modals - ensure we trigger both our handlers and Phoenix's native ones
    document.addEventListener('click', (event) => {
      // Handle close buttons for modals
      if (event.target.id === 'close-modal-btn' || event.target.id === 'cancel-btn' || 
          (event.target.closest && (event.target.closest('#close-modal-btn') || event.target.closest('#cancel-btn')))) {
        this._closeModal();
      }
      
      const clickTarget = event.target.closest(`[${this.bindingPrefix}click]`);
      if (clickTarget) {
        const eventName = clickTarget.getAttribute(`${this.bindingPrefix}click`);
        const valueId = clickTarget.getAttribute(`${this.bindingPrefix}value-id`);
        
        // Direct handling for modal events
        if (eventName === "show_new_role_modal") {
          // Don't prevent default - let Phoenix handle it too
          if (this.debug) {
            console.log("Handling show_new_role_modal click");
          }
          
          // Handle the event directly and manually trigger server-side handling
          this._simulateServerEvent("show_new_role_modal", { id: valueId });
        } 
        else if (eventName === "show_new_capability_modal") {
          if (this.debug) {
            console.log("Handling show_new_capability_modal click");
          }
          
          // Handle the event directly and manually trigger server-side handling
          this._simulateServerEvent("show_new_capability_modal", { id: valueId });
        }
        else if (eventName === "show_edit_role_modal" || 
                 eventName === "show_edit_capability_modal" || 
                 eventName === "close_modal") {
          
          if (this.debug) {
            console.log(`LiveView click event detected: ${eventName}`, { 
              target: clickTarget,
              valueId
            });
          }
          
          // Handle these other modal events similarly
          this._simulateServerEvent(eventName, { id: valueId });
        }
      }
    }, false);
    
    // Log LiveView events for debugging
    if (this.debug) {
      window.addEventListener('phx:page-loading-start', info => console.log("Loading start:", info));
      window.addEventListener('phx:page-loading-stop', info => console.log("Loading stop:", info));
      window.addEventListener('phx:error', info => console.error("Phoenix LiveView error:", info));
    }
  }

  // Set up debug listeners only - this won't interfere with actual event handling
  _setupDebugListeners() {
    if (!this.debug) return;
    
    console.log("Setting up LiveView debug listeners");
    
    // Log all LiveView-related events
    document.addEventListener('click', (event) => {
      const clickTarget = event.target.closest(`[${this.bindingPrefix}click]`);
      if (clickTarget) {
        const eventName = clickTarget.getAttribute(`${this.bindingPrefix}click`);
        const valueId = clickTarget.getAttribute(`${this.bindingPrefix}value-id`);
        
        console.log(`LiveView click event detected: ${eventName}`, { 
          target: clickTarget, 
          valueId,
          time: new Date().toISOString()
        });
      }
    }, false);
    
    // Log form submissions
    document.addEventListener('submit', (event) => {
      const form = event.target.closest(`[${this.bindingPrefix}submit]`);
      if (form) {
        const eventName = form.getAttribute(`${this.bindingPrefix}submit`);
        console.log(`LiveView form submission: ${eventName}`, { 
          form: form,
          formData: new FormData(form),
          time: new Date().toISOString()
        });
      }
    }, false);
    
    // Log all Phoenix LiveView events
    window.addEventListener('phx:page-loading-start', info => console.log("Loading start:", info));
    window.addEventListener('phx:page-loading-stop', info => console.log("Loading stop:", info));
    window.addEventListener('phx:error', info => console.error("Phoenix LiveView error:", info));
  }
  
  // Initialize all hooks defined in the opts.hooks object
  _initializeHooks() {
    if (this.hooks) {
      if (this.debug) {
        console.log("Initializing hooks:", Object.keys(this.hooks));
      }
      
      // Apply hooks to DOM elements
      Object.keys(this.hooks).forEach(hookName => {
        const elements = document.querySelectorAll(`[${this.bindingPrefix}hook="${hookName}"]`);
        if (elements.length > 0 && this.debug) {
          console.log(`Found ${elements.length} elements with hook ${hookName}`);
        }
        
        elements.forEach(element => {
          if (this.hooks[hookName] && this.hooks[hookName].mounted) {
            this.hooks[hookName].mounted.call({ el: element });
          }
        });
      });
    }
  }

  // Push an event to the server with special handling for modals
  _pushEventToServer(event, params = {}) {
    if (this.debug) {
      console.log(`Pushing event to server: ${event}`, params);
    }
    
    // Special handling for the modal-related events to ensure they work
    if (event === "show_new_role_modal") {
      this._handleModalEvent("show_new_role_modal", params);
    } else if (event === "show_new_capability_modal") {
      this._handleModalEvent("show_new_capability_modal", params);
    } else if (event === "show_edit_role_modal") {
      this._handleModalEvent("show_edit_role_modal", params);
    } else if (event === "show_edit_capability_modal") {
      this._handleModalEvent("show_edit_capability_modal", params);
    } else if (event === "close_modal") {
      this._handleModalEvent("close_modal", params);
    }
  }
  
  // Handle modal events by sending them to the server
  _handleModalEvent(event, params = {}) {
    if (this.debug) {
      console.log(`Handling modal event: ${event}`, params);
    }
    
    // Create a custom event that will be picked up by Phoenix LiveView
    const customEvent = new CustomEvent(`phx:${event}`, {
      bubbles: true,
      cancelable: true,
      detail: { params: params }
    });
    
    // Dispatch the event on the document to be picked up by Phoenix
    document.dispatchEvent(customEvent);
  }
  
  // Directly simulate a server-side event handling for modals - DISABLED
  _simulateServerEvent(event, params = {}) {
    if (this.debug) {
      console.log(`Custom modal implementation disabled. Using native Phoenix LiveView modals instead.`);
      console.log(`Event ${event} with params:`, params);
    }
    
    // Let Phoenix LiveView handle all modal functionality
    // This is critical to prevent event conflicts between custom JS and LiveView
    if (event === "close_modal") {
      // Handle closing the modal
      this._closeModal();
    }
  }
  }

  // Handle form submissions
  _handleFormSubmit(event, formAction) {
    // Do not prevent default - let Phoenix LiveView handle form submissions
    if (this.debug) {
      console.log(`Form submission for ${formAction}`, event.target);
      console.log('Letting Phoenix LiveView handle this natively');
    }
    
    // The form should have phx-submit attribute that Phoenix will handle
    // The modal will be closed by LiveView after the form is submitted
  }
  
  // Close any open modals
  _closeModal() {
    const modalContainer = document.querySelector(".modal-container");
    if (modalContainer) {
      modalContainer.innerHTML = '';
    }
  }
  
  // Disconnect the LiveView Socket
  disconnect() {
    this.connected = false;
    if (this.phoenixSocket) {
      // Disconnect the underlying Phoenix socket if it exists
      this.phoenixSocket.disconnect();
    }
    console.log("LiveView socket disconnected");
    return this;
  }

  // Enable debug mode
  enableDebug() {
    this.debug = true;
    console.log("LiveView debug mode enabled");
    this._setupDebugListeners();
    return this;
  }
  
  // Disable debug mode
  disableDebug() {
    this.debug = false;
    console.log("LiveView debug mode disabled");
    return this;
  }

  // Enable latency simulation for testing
  enableLatencySim(timeMs) {
    this.latency = timeMs;
    console.log(`LiveView latency simulation enabled: ${timeMs}ms`);
    return this;
  }

  // Disable latency simulation
  disableLatencySim() {
    this.latency = null;
    console.log("LiveView latency simulation disabled");
    return this;
  }
}
