{
  "openapi": "3.0.0",
  "info": {
    "title": "XIAM API",
    "version": "0.1.0",
    "description": "API for XIAM user authentication and management."
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and session management"
    },
    {
      "name": "Users",
      "description": "User management and operations"
    },
    {
      "name": "Consents",
      "description": "User consent management"
    },
    {
      "name": "Passkey",
      "description": "Passkey/WebAuthn credential management"
    },
    {
      "name": "MFA",
      "description": "Multi-factor authentication management"
    },
    {
      "name": "Debug",
      "description": "Debugging endpoints"
    },
    {
      "name": "GDPR",
      "description": "GDPR compliance and data management"
    },
    {
      "name": "Access Control",
      "description": "Role-based access control management"
    },
    {
      "name": "Products",
      "description": "Product management endpoints"
    },
    {
      "name": "System",
      "description": "System status and health endpoints"
    },
    {
      "name": "Hierarchy",
      "description": "Hierarchical node and access control management"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication token. Prefix with 'Bearer '."
      },
      "session": {
        "type": "apiKey",
        "name": "_xiam_key",
        "in": "cookie",
        "description": "Session cookie authentication (used for passkey management)"
      },
      "partialJwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Partial JWT token issued during MFA flow. Prefix with 'Bearer '."
      }
    },
    "schemas": {
      "HierarchyNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "description": "ltree path that represents the node's position in the hierarchy"
          },
          "node_type": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "path",
          "node_type"
        ]
      },
      "HierarchyNodeList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HierarchyNode"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HierarchyAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "role_id": {
            "type": "integer"
          },
          "access_path": {
            "type": "string",
            "description": "ltree path that defines the access scope"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "role": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "user_id",
          "role_id",
          "access_path"
        ]
      },
      "HierarchyAccessList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HierarchyAccess"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HierarchyNodeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_type": {
            "type": "string"
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "name",
          "node_type"
        ]
      },
      "HierarchyAccessRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "role_id": {
            "type": "integer"
          },
          "node_id": {
            "type": "integer",
            "description": "The node to grant access to"
          }
        },
        "required": [
          "user_id",
          "role_id",
          "node_id"
        ]
      },
      "AccessCheckResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "has_access": {
            "type": "boolean"
          },
          "node": {
            "$ref": "#/components/schemas/HierarchyNode",
            "nullable": true
          },
          "role": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "success",
          "has_access"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "nullable": true,
            "description": "Validation errors"
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "SuccessMessageResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "per_page": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "version": {
            "type": "string",
            "example": "0.1.0"
          },
          "environment": {
            "type": "string",
            "example": "dev"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DetailedStatusResponse": {
        "type": "object",
        "description": "Detailed system status",
        "properties": {
          "db_status": {
            "type": "string",
            "example": "ok"
          },
          "memory": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number",
                "format": "float",
                "description": "Total memory in MB"
              },
              "allocated": {
                "type": "number",
                "format": "float",
                "description": "Allocated memory in MB"
              },
              "atom": {
                "type": "number",
                "format": "float",
                "description": "Atom memory in MB"
              },
              "binary": {
                "type": "number",
                "format": "float",
                "description": "Binary memory in MB"
              },
              "code": {
                "type": "number",
                "format": "float",
                "description": "Code memory in MB"
              },
              "ets": {
                "type": "number",
                "format": "float",
                "description": "ETS memory in MB"
              },
              "processes": {
                "type": "number",
                "format": "float",
                "description": "Processes memory in MB"
              }
            }
          },
          "version": {
            "type": "string",
            "example": "0.1.0"
          },
          "environment": {
            "type": "string",
            "example": "dev"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SystemStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "status": {
            "type": "string",
            "example": "ok"
          },
          "uptime": {
            "type": "string",
            "example": "3 days, 2 hours, 1 minute"
          },
          "stats": {
            "type": "object",
            "properties": {
              "users": {
                "type": "integer",
                "example": 1250
              },
              "active_sessions": {
                "type": "integer",
                "example": 48
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "mfa_required": {
            "type": "boolean",
            "example": false,
            "nullable": true,
            "description": "Indicates if MFA verification step is required"
          },
          "partial_token": {
            "type": "string",
            "description": "Partial JWT token issued if mfa_required is true",
            "nullable": true
          },
          "token": {
            "type": "string",
            "description": "Full JWT token if login is complete (no MFA or MFA verified)",
            "nullable": true
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "email": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "success"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "token": {
            "type": "string",
            "description": "JWT token"
          }
        },
        "required": [
          "success",
          "token"
        ]
      },
      "VerifyResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "valid": {
            "type": "boolean",
            "example": true
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "email": {
                "type": "string"
              },
              "mfa_enabled": {
                "type": "boolean"
              },
              "role": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "capabilities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "success",
          "valid",
          "user"
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Logged out successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "MfaChallengeResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Please enter the code from your authenticator app"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "MfaVerifyRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The TOTP code from the authenticator app"
          }
        },
        "required": [
          "code"
        ]
      },
      "UserBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "mfa_enabled": {
            "type": "boolean"
          },
          "role": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "inserted_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBase"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/UserBase"
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "password_confirmation": {
            "type": "string",
            "format": "password"
          },
          "role_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "email",
          "password",
          "password_confirmation"
        ]
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "current_password": {
            "type": "string",
            "format": "password"
          },
          "password": {
            "type": "string",
            "format": "password",
            "nullable": true
          },
          "password_confirmation": {
            "type": "string",
            "format": "password",
            "nullable": true
          },
          "role_id": {
            "type": "integer",
            "nullable": true
          },
          "mfa_enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ConsentBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "marketing",
              "data_processing",
              "terms_and_conditions"
            ]
          },
          "granted": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "inserted_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConsentListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentBase"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "ConsentCreateRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "marketing",
              "data_processing",
              "terms_and_conditions"
            ]
          },
          "granted": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "user_id",
          "type",
          "granted"
        ]
      },
      "ConsentUpdateRequest": {
        "type": "object",
        "properties": {
          "granted": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "granted"
        ]
      },
      "UserAccessRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "product_id": {
            "type": "integer"
          },
          "role_id": {
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "product_id",
          "role_id"
        ]
      },
      "UserAccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "user_id": {
                  "type": "integer"
                },
                "product_id": {
                  "type": "integer"
                },
                "role_id": {
                  "type": "integer"
                },
                "product": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "role": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "capabilities": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ProductBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "inserted_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductBase"
            }
          }
        }
      },
      "ProductCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "CapabilityBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "product_id": {
            "type": "integer"
          },
          "inserted_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CapabilityListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityBase"
            }
          }
        }
      },
      "CapabilityCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "product_id": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "product_id"
        ]
      },
      "AuthenticationOptionsRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "AuthenticationOptionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "options": {
            "type": "object",
            "properties": {
              "challenge": {
                "type": "string"
              },
              "timeout": {
                "type": "integer"
              },
              "rpId": {
                "type": "string"
              },
              "allowCredentials": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "public-key"
                      ]
                    }
                  }
                }
              },
              "userVerification": {
                "type": "string",
                "enum": [
                  "preferred",
                  "required",
                  "discouraged"
                ]
              }
            }
          }
        }
      },
      "AuthenticationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rawId": {
            "type": "string"
          },
          "response": {
            "type": "object",
            "properties": {
              "clientDataJSON": {
                "type": "string"
              },
              "authenticatorData": {
                "type": "string"
              },
              "signature": {
                "type": "string"
              },
              "userHandle": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "public-key"
            ]
          }
        },
        "required": [
          "id",
          "rawId",
          "response",
          "type"
        ]
      },
      "RegistrationOptionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "options": {
            "type": "object",
            "properties": {
              "challenge": {
                "type": "string"
              },
              "rp": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  }
                }
              },
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "displayName": {
                    "type": "string"
                  }
                }
              },
              "pubKeyCredParams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "public-key"
                      ]
                    },
                    "alg": {
                      "type": "integer"
                    }
                  }
                }
              },
              "timeout": {
                "type": "integer"
              },
              "attestation": {
                "type": "string",
                "enum": [
                  "none",
                  "direct",
                  "indirect"
                ]
              },
              "excludeCredentials": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "public-key"
                      ]
                    }
                  }
                }
              },
              "authenticatorSelection": {
                "type": "object",
                "properties": {
                  "authenticatorAttachment": {
                    "type": "string",
                    "enum": [
                      "platform",
                      "cross-platform"
                    ]
                  },
                  "requireResidentKey": {
                    "type": "boolean"
                  },
                  "userVerification": {
                    "type": "string",
                    "enum": [
                      "preferred",
                      "required",
                      "discouraged"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "RegistrationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "rawId": {
            "type": "string"
          },
          "response": {
            "type": "object",
            "properties": {
              "clientDataJSON": {
                "type": "string"
              },
              "attestationObject": {
                "type": "string"
              },
              "transports": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "public-key"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "rawId",
          "response",
          "type"
        ]
      },
      "PasskeyBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "PasskeyListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasskeyBase"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate a user with email and password",
        "operationId": "login",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - may require MFA or login directly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Basic Health Check",
        "description": "Get basic system health status",
        "operationId": "basicHealth",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Basic health status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/health/detailed": {
      "get": {
        "summary": "Detailed Health Check",
        "description": "Get detailed system health metrics",
        "operationId": "detailedHealth",
        "tags": [
          "System"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed health metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/system/health": {
      "get": {
        "summary": "System Health",
        "description": "Get system health status",
        "operationId": "systemHealth",
        "tags": [
          "System"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/passkey/options": {
      "get": {
        "summary": "Get Passkey Authentication Options",
        "description": "Get challenge and options for passkey authentication",
        "operationId": "passkeyAuthenticationOptions",
        "tags": [
          "Authentication",
          "Passkey"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "User's email address"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/passkey": {
      "post": {
        "summary": "Authenticate with Passkey",
        "description": "Authenticate a user with passkey credentials",
        "operationId": "passkeyAuthenticate",
        "tags": [
          "Authentication",
          "Passkey"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/mfa/challenge": {
      "get": {
        "summary": "Request MFA Challenge",
        "description": "Request a challenge for MFA verification",
        "operationId": "mfaChallenge",
        "tags": [
          "Authentication",
          "MFA"
        ],
        "security": [
          {
            "partialJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "MFA challenge message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaChallengeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/mfa/verify": {
      "post": {
        "summary": "Verify MFA Code",
        "description": "Verify the MFA code to complete login",
        "operationId": "mfaVerify",
        "tags": [
          "Authentication",
          "MFA"
        ],
        "security": [
          {
            "partialJwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MFA verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid MFA code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/passkeys/registration_options": {
      "get": {
        "summary": "Get Passkey Registration Options",
        "description": "Get challenge and options for registering a new passkey",
        "operationId": "passkeyRegistrationOptions",
        "tags": [
          "Passkey"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Registration options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationOptionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/passkeys/register": {
      "post": {
        "summary": "Register Passkey",
        "description": "Register a new passkey for the authenticated user",
        "operationId": "registerPasskey",
        "tags": [
          "Passkey"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Passkey registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid registration data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/passkeys": {
      "get": {
        "summary": "List User Passkeys",
        "description": "Get a list of passkeys registered for the authenticated user",
        "operationId": "listPasskeys",
        "tags": [
          "Passkey"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of passkeys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasskeyListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/passkeys/debug": {
      "get": {
        "summary": "Debug Passkeys",
        "description": "Get debug information about passkeys (development only)",
        "operationId": "debugPasskeys",
        "tags": [
          "Passkey",
          "Debug"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Debug information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/passkeys/{id}": {
      "delete": {
        "summary": "Delete Passkey",
        "description": "Delete a passkey by ID",
        "operationId": "deletePasskey",
        "tags": [
          "Passkey"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Passkey ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Passkey deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Passkey not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh an authentication token",
        "operationId": "refreshToken",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or token expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "get": {
        "summary": "Verify Token",
        "description": "Verify an authentication token and get user information",
        "operationId": "verifyToken",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout",
        "description": "Log out a user and invalidate their token",
        "operationId": "logout",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/system/status": {
      "get": {
        "summary": "System Status",
        "description": "Get detailed system status and statistics",
        "operationId": "systemStatus",
        "tags": [
          "System"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "System status and statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "List Users",
        "description": "Get a paginated list of users",
        "operationId": "listUsers",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create a new user",
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get User",
        "description": "Get a user by ID",
        "operationId": "getUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update User",
        "description": "Update a user by ID",
        "operationId": "updateUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete a user by ID",
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}/anonymize": {
      "post": {
        "summary": "Anonymize User",
        "description": "Anonymize a user's data for GDPR compliance",
        "operationId": "anonymizeUser",
        "tags": [
          "Users",
          "GDPR"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User anonymized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot anonymize your own account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Failed to anonymize user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/consents": {
      "get": {
        "summary": "List Consents",
        "description": "Get a paginated list of consents",
        "operationId": "listConsents",
        "tags": [
          "Consents"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Items per page"
          },
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of consents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Consent",
        "description": "Create a new consent record",
        "operationId": "createConsent",
        "tags": [
          "Consents"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Consent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentBase"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/consents/{id}": {
      "put": {
        "summary": "Update Consent",
        "description": "Update a consent record by ID",
        "operationId": "updateConsent",
        "tags": [
          "Consents"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Consent ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Consent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentBase"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Consent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Consent",
        "description": "Delete a consent record by ID",
        "operationId": "deleteConsent",
        "tags": [
          "Consents"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Consent ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Consent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Consent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/access": {
      "post": {
        "summary": "Set User Access",
        "description": "Assign a role to a user for a specific product",
        "operationId": "setUserAccess",
        "tags": [
          "Access Control"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Access set successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get User Access",
        "description": "Get a user's access permissions across products",
        "operationId": "getUserAccess",
        "tags": [
          "Access Control"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User access information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "List Products",
        "description": "Get a list of all products",
        "operationId": "listProducts",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Product",
        "description": "Create a new product",
        "operationId": "createProduct",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBase"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{product_id}/capabilities": {
      "get": {
        "summary": "Get Product Capabilities",
        "description": "Get a list of capabilities for a specific product",
        "operationId": "getProductCapabilities",
        "tags": [
          "Products",
          "Access Control"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of capabilities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/capabilities": {
      "post": {
        "summary": "Create Capability",
        "description": "Create a new capability for a product",
        "operationId": "createCapability",
        "tags": [
          "Access Control"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapabilityCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Capability created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityBase"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/nodes": {
      "get": {
        "summary": "List Hierarchy Nodes",
        "description": "Get a list of all hierarchy nodes",
        "operationId": "listHierarchyNodes",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyNodeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Hierarchy Node",
        "description": "Create a new hierarchy node",
        "operationId": "createHierarchyNode",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HierarchyNodeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/HierarchyNode"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/nodes/{id}": {
      "get": {
        "summary": "Get Hierarchy Node",
        "description": "Get a hierarchy node by ID",
        "operationId": "getHierarchyNode",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/HierarchyNode"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Hierarchy Node",
        "description": "Update a hierarchy node by ID",
        "operationId": "updateHierarchyNode",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HierarchyNodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/HierarchyNode"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Hierarchy Node",
        "description": "Delete a hierarchy node by ID",
        "operationId": "deleteHierarchyNode",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/nodes/{id}/children": {
      "get": {
        "summary": "Get Node Children",
        "description": "Get all direct children of a hierarchy node",
        "operationId": "getNodeChildren",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyNodeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/nodes/{id}/descendants": {
      "get": {
        "summary": "Get Node Descendants",
        "description": "Get all descendants of a hierarchy node",
        "operationId": "getNodeDescendants",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyNodeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/access": {
      "get": {
        "summary": "List Hierarchy Access Grants",
        "description": "Get a list of all hierarchy access grants",
        "operationId": "listHierarchyAccess",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyAccessList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Grant Hierarchy Access",
        "description": "Grant access to a hierarchy node for a user with a specific role",
        "operationId": "grantHierarchyAccess",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HierarchyAccessRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/HierarchyAccess"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/access/{id}": {
      "delete": {
        "summary": "Revoke Hierarchy Access",
        "description": "Revoke an existing hierarchy access grant",
        "operationId": "revokeHierarchyAccess",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Access grant ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/access/node/{node_id}": {
      "get": {
        "summary": "List Node Access Grants",
        "description": "Get all access grants for a specific node",
        "operationId": "listNodeAccessGrants",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyAccessList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/access/user/{user_id}": {
      "get": {
        "summary": "List User Access Grants",
        "description": "Get all access grants for a specific user",
        "operationId": "listUserAccessGrants",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HierarchyAccessList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hierarchy/check-access": {
      "post": {
        "summary": "Check User Access",
        "description": "Check if a user has access to a specific node",
        "operationId": "checkUserAccess",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id",
                  "node_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}