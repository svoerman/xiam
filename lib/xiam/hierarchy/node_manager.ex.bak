defmodule XIAM.Hierarchy.NodeManager do
  # Suppress warnings for intentionally unused functions
  # @dialyzer {:nowarn_function, create_node: 1}

  @moduledoc """
  Manages hierarchy nodes including creation, retrieval, updating, and deletion.
  Extracted from the original XIAM.Hierarchy module to improve maintainability.
  """

  import Ecto.Query
  alias XIAM.Repo
  alias XIAM.Hierarchy.Node
  alias XIAM.Hierarchy.PathCalculator
  alias XIAM.Cache.HierarchyCache

  @doc """
  Creates a new node. If parent_id is provided, it will be created as a child of that node.
  If no parent_id is provided, it will be created as a root node.
  """
  def create_node(%{parent_id: parent_id} = attrs) when not is_nil(parent_id) do
    # Handle both string and atom keys consistently
    attrs = for {key, val} <- attrs, into: %{}, do: {to_string(key), val}
    name = attrs["name"]

    # Build path from parent's path
    parent = get_node(parent_id)

    if is_nil(parent) do
      {:error, :parent_not_found}
    else
      path = PathCalculator.build_child_path(parent.path, name)

      %Node{}
      |> Node.changeset(attrs)
      |> Ecto.Changeset.put_change(:path, path)
      |> Repo.insert()
      |> tap(fn
        {:ok, node} -> invalidate_node_caches(node)
        _ -> :ok
      end)
    end
  end

  def create_node(attrs) do
    # Handle both string and atom keys
    attrs = for {key, val} <- attrs, into: %{}, do: {to_string(key), val}

    # Get name from attrs using string key
    name = attrs["name"]

    # Check if there's a parent_id (could be as string key)
    parent_id = attrs["parent_id"]

    if parent_id do
      # If there's a parent, delegate to the parent version
      create_node(%{parent_id: parent_id, name: name, node_type: attrs["node_type"], metadata: attrs["metadata"]})
    else
      # Create root node
      path = PathCalculator.sanitize_name(name)

      %Node{}
      |> Node.changeset(attrs)
      |> Ecto.Changeset.put_change(:path, path)
      |> Repo.insert()
      |> tap(fn
        {:ok, node} -> invalidate_node_caches(node)
        _ -> :ok
      end)
    end
  end

  @doc """
  Gets a node by ID with caching for improved performance.
  In test environment, this bypasses the cache to ensure consistent test behavior.
  """
  def get_node(id) do
    if Mix.env() == :test do
      # In test environment, always go directly to the database
      Repo.get(Node, id)
    else
      cache_key = "node:#{id}"

      HierarchyCache.get_or_store(cache_key, fn ->
        Repo.get(Node, id)
      end)
    end
  end

  @doc """
  Gets a node by ID without using the cache. Used internally for operations
  that need to bypass the cache, such as deleting nodes.
  """
  def get_node_raw(id) do
    # Handle both ID values and node structs
    node_id = extract_node_id(id)
    Repo.get(Node, node_id)
  end

  # Helper to extract node ID from either an ID value or a node struct
  defp extract_node_id(%Node{id: id}), do: id
  defp extract_node_id(id), do: id
  
  # Check if moving a node to new_parent would create a cycle
  # This occurs when new_parent is a descendant of the node being moved
  defp would_create_cycle?(node_id, new_parent_id) do
    # Extract IDs if structs were passed
    real_node_id = extract_node_id(node_id)
    real_parent_id = extract_node_id(new_parent_id)
    
    # Get all descendants of the node
    descendants = get_descendants(real_node_id)
    
    # Check if the new parent is among the descendants
    Enum.any?(descendants, fn descendant -> descendant.id == real_parent_id end)
  end

  @doc """
  Gets a node by its path with caching for improved performance.
  """
  def get_node_by_path(path) do
    cache_key = "node_path:#{path}"

    HierarchyCache.get_or_store(cache_key, fn ->
      Repo.get_by(Node, path: path)
    end)
  end

  @doc """
  Lists all nodes, ordered by path.
  """
  def list_nodes do
    Node
    |> order_by([n], n.path)
    |> Repo.all()
  end

  @doc """
  Lists only root nodes (nodes without parents).
  Much more efficient than loading all nodes when dealing with large hierarchies.
  Uses caching for improved performance.
  """
  def list_root_nodes do
    cache_key = "root_nodes"

    HierarchyCache.get_or_store(cache_key, fn ->
      Node
      |> where([n], is_nil(n.parent_id))
      |> order_by([n], n.path)
      |> Repo.all()
    end, 60_000) # 1 minute TTL for root nodes
  end

  @doc """
  Paginates nodes for more efficient loading of large hierarchies.
  """
  def paginate_nodes(page \\ 1, per_page \\ 50) do
    total_count = Node |> Repo.aggregate(:count, :id)
    total_pages = ceil(total_count / per_page)

    nodes = Node
    |> order_by([n], n.path)
    |> limit(^per_page)
    |> offset(^((page - 1) * per_page))
    |> Repo.all()

    %{
      nodes: nodes,
      page: page,
      per_page: per_page,
      total_count: total_count,
      total_pages: total_pages
    }
  end

  @doc """
  Search for nodes by name or path, limit results to improve performance.
  This is much more efficient than loading all nodes when searching in large hierarchies.
  """
  def search_nodes(term, limit \\ 100) do
    search_term = "%#{term}%"

    Node
    |> where([n], ilike(n.name, ^search_term) or ilike(n.path, ^search_term))
    |> order_by([n], n.path)
    |> limit(^limit)
    |> Repo.all()
  end

  @doc """
  Gets direct children of a node with caching for improved performance.
  """
  def get_direct_children(parent_id) do
    cache_key = "children:#{parent_id}"

    HierarchyCache.get_or_store(cache_key, fn ->
      Node
      |> where([n], n.parent_id == ^parent_id)
      |> order_by([n], n.path)
      |> Repo.all()
    end)
  end

  @doc """
  Gets all descendants of a node (children, grandchildren, etc).
  """
  def get_descendants(parent_id) do
    # First extract the ID if a node struct was passed
    node_id = extract_node_id(parent_id)
    parent = get_node(node_id)

    if is_nil(parent) do
      []
    else
      descendants_query =
        from n in Node,
          where: fragment("?::ltree <@ ?::ltree", n.path, ^parent.path),
          where: n.id != ^parent.id,
          order_by: n.path

      Repo.all(descendants_query)
    end
  end

  @doc """
  Batch creates multiple nodes with parent-child relationships.
  This is a convenience function for creating multiple related nodes at once.
  """
  def batch_create_nodes(nodes_params) do
    # Process each node in sequence, maintaining hierarchy relationships
    Enum.reduce_while(nodes_params, {:ok, []}, fn node_params, {:ok, acc} ->
      case create_node(node_params) do
        {:ok, node} -> {:cont, {:ok, [node | acc]}}
        error -> {:halt, error}
      end
    end)
  end

  @doc """
  Updates a node's attributes.
  """
  def update_node(id, attrs) do
    node = get_node_raw(id)

    if is_nil(node) do
      {:error, :not_found}
    else
      node
      |> Node.changeset(attrs)
      |> Repo.update()
      |> tap(fn
        {:ok, node} -> invalidate_node_caches(node)
        _ -> :ok
      end)
    end
  end

  @doc """
  Moves a node to a new parent, updating its path and all its descendants' paths.
  This is a more complex operation that requires updating all descendant paths to maintain
  the correct hierarchy.
  """
  def move_node(node_id, new_parent_id) do
    node = get_node_raw(node_id)
    new_parent = get_node_raw(new_parent_id)

    cond do
      is_nil(node) ->
        {:error, :node_not_found}

      is_nil(new_parent) ->
        {:error, :parent_not_found}

      node_id == new_parent_id ->
        {:error, :cannot_be_own_parent}
        
      # Check if new_parent is a descendant of node (would create cycle)
      would_create_cycle?(node_id, new_parent_id) ->
        {:error, :would_create_cycle}

      true ->
        # Check if the node is already under this parent
        if node.parent_id == new_parent_id do
          {:ok, node}
        else
          # Get all descendants before moving to update their paths
          descendants = get_descendants(node_id)

          # Calculate new path
          new_path = PathCalculator.build_child_path(new_parent.path, node.name)

          # Update node's parent_id and path
          updated_node =
            node
            |> Node.changeset(%{parent_id: new_parent_id})
            |> Ecto.Changeset.put_change(:path, new_path)
            |> Repo.update!()

          # Also update all descendant paths
          if length(descendants) > 0 do
            Enum.each(descendants, fn descendant ->
              relative_path = String.replace_prefix(descendant.path, node.path, "")
              new_descendant_path = new_path <> relative_path

              descendant
              |> Node.changeset(%{})
              |> Ecto.Changeset.put_change(:path, new_descendant_path)
              |> Repo.update!()

              # Invalidate cache for this descendant
              invalidate_node_caches(descendant)
            end)
          end

          # Invalidate cache for the moved node
          invalidate_node_caches(updated_node)

          {:ok, updated_node}
        end
    end
  end

  @doc """
  Deletes a node by ID. If the node has children, they will be deleted as well.
  Returns {:ok, deleted_count} if successful.
  """
  def delete_node(id, propagate \\ true) do
    node = get_node_raw(id)

    if is_nil(node) do
      {:error, :not_found}
    else
      # Get children before deletion
      children =
        if propagate do
          get_descendants(id)
        else
          []
        end

      # First delete children if requested (must happen before parent deletion)
      deleted_count =
        if propagate && length(children) > 0 do
          # Delete all descendants in reverse path order to avoid constraint violations
          children
          |> Enum.sort_by(& &1.path, :desc) # Sort by path descending to delete deepest children first
          |> Enum.each(fn child ->
            Repo.delete(child)
            invalidate_node_caches(child)
          end)

          # Return total count of deleted nodes
          1 + length(children)
        else
          1
        end
        
      # Now delete the parent node after children are gone
      Repo.delete(node)

      # Invalidate cache for the deleted node
      invalidate_node_caches(node)

      {:ok, deleted_count}
    end
  end

  @doc """
  Gets the parent of a node.
  """
  def get_parent(node_id) do
    node = get_node(node_id)

    if is_nil(node) || is_nil(node.parent_id) do
      nil
    else
      get_node(node.parent_id)
    end
  end

  # Commented out duplicate function to avoid warning
  # @doc """
  # Gets all descendants of a node (children, grandchildren, etc).
  # """
  # def get_descendants(parent_id) do
  #   parent = get_node(parent_id)
  #
  #   if is_nil(parent) do
  #     []
  #   else
  #     descendants_query =
  #       from n in Node,
  #         where: fragment("?::ltree <@ ?::ltree", n.path, ^parent.path),
  #         where: n.id != ^parent.id,
  #         order_by: n.path
  #
  #     Repo.all(descendants_query)
  #   end
  # end

  # Function kept for potential future use but commented to avoid warnings
  # defp update_descendant_paths(parent_node, descendants) do
    # Function commented out to remove warnings
    # Implementation preserved in comments below:
    # 
    # # The issue is with how we're calculating the relative path. Instead of trying to extract from the old
    # # path prefix, we need to extract the part of the path that follows the old parent's path.
    # 
    # # Get the parent's old path (before it was moved)
    # old_parent_path = parent_node.path
    # 
    # # Get descendants and update each one
    # Enum.each(descendants, fn descendant ->
    #   # Calculate the relative path part (the part after the parent's path)
    #   # Example: if parent path is "root.dept" and child path is "root.dept.team",
    #   # the relative path would be ".team"
    #   relative_path = String.replace_prefix(descendant.path, old_parent_path, "")
    #   
    #   # Combine the parent's new path with the relative path to get the new descendant path
    #   new_path = parent_node.path <> relative_path
    #   
    #   # Update the descendant's path
    #   descendant
    #   |> Node.changeset(%{})
    #   |> Ecto.Changeset.put_change(:path, new_path)
    #   |> Repo.update!()
    #   
    #   # Invalidate cache for this descendant
    #   invalidate_node_caches(descendant)
    # end)
  end

  @doc """
  Invalidates all cache entries related to a node, including:
  - The node itself by ID
  - The node by path
  - The node's parent's children list
  - The root nodes list (if this is a root node)
  """
  def invalidate_node_caches(node) do
    # Invalidate node cache by ID
    HierarchyCache.invalidate("node:#{node.id}")
    
    # Invalidate node cache by path
    HierarchyCache.invalidate("node_path:#{node.path}")
    
    # Invalidate parent's children cache
    if node.parent_id do
      HierarchyCache.invalidate("children:#{node.parent_id}")
    end
    
    # If this is a root node, invalidate root nodes cache
    if is_nil(node.parent_id) do
      HierarchyCache.invalidate("root_nodes")
    end
    
    :ok
  end

  # Kept for potential future use
  @doc false

  # defp descendant_ids_include?(descendants, target_id) do
    # Function commented out to remove warnings
    # Implementation preserved in comment below:
    # Enum.any?(descendants, fn d -> d.id == target_id end)
  # end
end
